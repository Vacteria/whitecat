#/bin/bash

alias sql='sqlite3 ${MYDB}'
alias dialog='dialog --colors --title'

include()
{
	[ -z "${MYHOME}/${1}" ] && gui_die "$(gettext 'Must be provide some file')"
	[ ! -f "${MYHOME}/${1}" ] && gui_die "$(gettext '%s file not found')" "${1}"

	. ${MYHOME}/${1} || gui_die "$(gettext 'Failed to load %s file')" "${1}"

	return 0
}

clock()
{
	local count="${1-:10}"

	for ((i=0; i<=100; i=i+${count}))
	do
		echo $i
		sleep 1
	done
}

umount_killing()
{
	local DIR FAIL K

	DIR="${1}"
	if [ -z "${DIR}" ]
	then
		log_mis_args "${FUNCNAME}"
		return 1
	fi

	log "$(gettext 'Killing and umount %s directory')" "${DIR}"
	for K in $(fuser -m ${DIR})
	do
		log_killing_hold "${K}"
		log "$(gettext 'Killing %s process')" "${K}"
		if ! kill -KILL ${K}
		then
			log "$(gettext 'Failed to kill %s process')" "${K}"
		fi
	done

	if ! umount ${DIR}
	then
		log "$(gettext 'Unable to kill and umount %s directory')" "${DIR}"
		return 1
	else
		log "$(gettext 'Umount %s directory sucefull')" "${DIR}"
	fi

	return 0
}

dev_from_dir()
{
	local INPUT DEV MNT

	INPUT="${1}"
	if [ -z "${INPUT}" ]
	then
		log_mis_args ${FUNCNAME}
		return 1
	fi

	if [ ! -d "${INPUT}" ]
	then
		log "$(gettext '%s is not directory')"
		return 1
	fi

	while read DEV MNT FS REST
	do
		if [[ "${MNT}" == "${INPUT}" && -n "${DEV}" ]]
		then
			printf "${DEV}"
			break
		fi
	done < /proc/mounts

	return 0
}

dir_from_dev()
{
	local INPUT DEV MNT

	INPUT="${1}"
	if [ -z "${INPUT}" ]
	then
		log_mis_args ${FUNCNAME}
		return 1
	fi

	if [ ! -c "${INPUT}" ]
	then
		log "$(gettext '%s is not charset device')"
		return 1
	fi

	while read DEV MNT FS OPTIONS REST
	do
		if [[ "${DEV}" == "${INPUT}" && -n "${MNT}" ]]
		then
			printf "${MNT}"
			break
		fi
	done < /proc/mounts

	return 0
}

l_umount()
{
	local INPUT IS DEV DIR 

	INPUT="${1}"
	if [ -z "${INPUT}" ]
	then
		log_mis_args ${FUNCNAME}
		return 1
	fi

	if [ -b "${INPUT}" ]
	then
		IS="node"
		DEV="${INPUT}"
		DIR="$(dir_from_dev ${DEV})"
	elif [ -d "${INPUT}" ]
	then
		IS="dir"
		DIR="${INPUT}"
		DEV="$(dev_from_dir ${DIR})"
	else
		log "$(gettext '%s is not node or directory')"
		return 1
	fi

	if [ "${IS}" == "dir" ]
	then
		if [ -z "${DEV}" ]
		then
			log_no_mount "${DIR}"
			return 0
		fi

		if mountpoint -q ${DIR}
		then
			case "${DIR}" in
				/proc|/sys|/dev|/dev/pts|/run )
					log_forb_umount "${DIR}"
					return 1
				;;
			esac

			log_umounting "${DIR}"
			if ! umount ${DIR}
			then
				umount_killing "${DIR}" || return 1	
			fi
		else
			log_no_mount "${DIR}"
		fi
	elif [ "${IS}" == "node" ]
	then
		if [ -z "${DIR}" ]
		then
			log_no_mount "${DEV}"
			return 0
		fi

		case "${DIR}" in
			/proc|/sys|/dev|/dev/pts|/run )
				log_forb_umount "${DIR}"
				return 1
			;;
		esac

		[ "$(mount --guess-fstype ${DEV})" == "swap" ] && return 0

		log_umounting "${DEV}"
		if ! umount ${DEV}
		then
			umount_killing "${DEV}" || return 1	
		fi
	fi

	return 0
}

l_mount()
{
	local DEV DIR

	DEV="/dev/${1##/dev/}"
	DIR="${2}"

	if [[ -z "${DEV}" || -z "${DIR}" ]]
	then
		log_mis_args "${FUNCNAME}"
		return 1
	fi

	if [ -d "${DIR}" ]
	then
		log "$(gettext 'Mount directory found')"
		l_umount ${DIR} || return 1
	fi

	log_mounting "${DEV}" "${DIR}"
	[ ! -d "${DIR}" ] && mkdir -p ${DIR}

	[ "$(mount --guess-fstype ${DEV})" == "swap" ] && return 0

	if ! mount ${DEV} ${DIR}
	then
		log "$(gettext 'Failed to mount %s device')" "${DEV}"
		return 1
	fi

	return 0
}

umount_all()
{
	if mountpoint -q ${MYROOT} &>/dev/null
	then
		log "$(gettext 'Cleanning %s mountages')" "${MYROOT}"
		for P in run proc sys dev usr home var var/tmp tmp
		do
			if mountpoint -q ${MYROOT}/${P}
			then
				log_umounting "${MYROOT}/${P}"
				if ! umount ${MYROOT}/${P}
				then
					umount_killing "${MYROOT}/${P}" || return 1
				fi
			else
				log_no_mount "${MYROOT}/${P}"
			fi
		done

		log_umounting "${MYROOT}"
		if ! umount ${MYROOT}
		then
			umount_killing "${MYROOT}" || return 1
		fi
	else
		log_no_mount "${MYROOT}"
	fi

	return 0
}

